/*
 * EasyBimehLandingLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package ir.notifaano.server.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import ir.notifaano.server.*;
import ir.notifaano.server.models.*;
import ir.notifaano.server.exceptions.*;
import ir.notifaano.server.http.client.HttpClient;
import ir.notifaano.server.http.client.HttpContext;
import ir.notifaano.server.http.request.HttpRequest;
import ir.notifaano.server.http.response.HttpResponse;
import ir.notifaano.server.http.response.HttpStringResponse;
import ir.notifaano.server.http.client.APICallBack;
import ir.notifaano.server.controllers.syncwrapper.APICallBackCatcher;

public class TrackingDamageController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static TrackingDamageController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the TrackingDamageController class 
     */
    public static TrackingDamageController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new TrackingDamageController();
                }
            }
        }
        return instance;
    }

    /**
     * استعلام وضعیت خسارت
     * @param    mTrackingCode    Required parameter: کد پیگیری خسارت
     * @param    xApiKey    Required parameter: کلید اختصاصی ارتباط با سرور
     * @return    Returns the BaseModelTrakingCode response from the API call 
     */
    public BaseModelTrakingCode getTrackingCode(
                final String mTrackingCode,
                final String xApiKey
    ) throws Throwable {

        HttpRequest _request = _buildGetTrackingCodeRequest(mTrackingCode, xApiKey);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetTrackingCodeResponse(_context);
    }

    /**
     * استعلام وضعیت خسارت
     * @param    mTrackingCode    Required parameter: کد پیگیری خسارت
     * @param    xApiKey    Required parameter: کلید اختصاصی ارتباط با سرور
     */
    public void getTrackingCodeAsync(
                final String mTrackingCode,
                final String xApiKey,
                final APICallBack<BaseModelTrakingCode> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetTrackingCodeRequest(mTrackingCode, xApiKey);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            BaseModelTrakingCode returnValue = _handleGetTrackingCodeResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getTrackingCode
     */
    private HttpRequest _buildGetTrackingCodeRequest(
                final String mTrackingCode,
                final String xApiKey) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/TrackingDamage/TrackingCode/");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("/{TrackingCode}", mTrackingCode);
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("x-api-key", xApiKey);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getTrackingCode
     * @return An object of type BaseModelTrakingCode
     */
    private BaseModelTrakingCode _handleGetTrackingCodeResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new Status400Exception("Bad Request", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        BaseModelTrakingCode _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<BaseModelTrakingCode>(){});

        return _result;
    }

    /**
     * ثبت خسارت بیمه
     * @param    body    Required parameter: اطلاعات خسارت
     * @param    xApiKey    Required parameter: کلید اختصاصی ارتباط با سرور
     * @param    contentType    Required parameter: Example: 
     * @return    Returns the TrackingDamage response from the API call 
     */
    public TrackingDamage createTrackingDamage(
                final TrackingDamageRequest body,
                final String xApiKey,
                final String contentType
    ) throws Throwable {

        HttpRequest _request = _buildCreateTrackingDamageRequest(body, xApiKey, contentType);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateTrackingDamageResponse(_context);
    }

    /**
     * ثبت خسارت بیمه
     * @param    body    Required parameter: اطلاعات خسارت
     * @param    xApiKey    Required parameter: کلید اختصاصی ارتباط با سرور
     * @param    contentType    Required parameter: Example: 
     */
    public void createTrackingDamageAsync(
                final TrackingDamageRequest body,
                final String xApiKey,
                final String contentType,
                final APICallBack<TrackingDamage> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateTrackingDamageRequest(body, xApiKey, contentType);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            TrackingDamage returnValue = _handleCreateTrackingDamageResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createTrackingDamage
     */
    private HttpRequest _buildCreateTrackingDamageRequest(
                final TrackingDamageRequest body,
                final String xApiKey,
                final String contentType) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/TrackingDamage");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("x-api-key", xApiKey);
        _headers.put("Content-Type", contentType);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createTrackingDamage
     * @return An object of type TrackingDamage
     */
    private TrackingDamage _handleCreateTrackingDamageResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        TrackingDamage _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<TrackingDamage>(){});

        return _result;
    }

    /**
     * دریافت لیست وضعیت های خسارت
     * @param    statusType    Required parameter: نوع وضعیت ها ی خسارت => 0
     * @param    xApiKey    Required parameter: کلید اختصاصی ارتباط با سرور
     * @return    Returns the BaseModelStatusStatusCollections response from the API call 
     */
    public BaseModelStatusStatusCollections getStatusStatusCollections(
                final int statusType,
                final String xApiKey
    ) throws Throwable {

        HttpRequest _request = _buildGetStatusStatusCollectionsRequest(statusType, xApiKey);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetStatusStatusCollectionsResponse(_context);
    }

    /**
     * دریافت لیست وضعیت های خسارت
     * @param    statusType    Required parameter: نوع وضعیت ها ی خسارت => 0
     * @param    xApiKey    Required parameter: کلید اختصاصی ارتباط با سرور
     */
    public void getStatusStatusCollectionsAsync(
                final int statusType,
                final String xApiKey,
                final APICallBack<BaseModelStatusStatusCollections> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetStatusStatusCollectionsRequest(statusType, xApiKey);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            BaseModelStatusStatusCollections returnValue = _handleGetStatusStatusCollectionsResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getStatusStatusCollections
     */
    private HttpRequest _buildGetStatusStatusCollectionsRequest(
                final int statusType,
                final String xApiKey) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/Status/StatusCollections");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("statusType", statusType);
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("x-api-key", xApiKey);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getStatusStatusCollections
     * @return An object of type BaseModelStatusStatusCollections
     */
    private BaseModelStatusStatusCollections _handleGetStatusStatusCollectionsResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        BaseModelStatusStatusCollections _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<BaseModelStatusStatusCollections>(){});

        return _result;
    }

    /**
     * دریافت اطلاعات وضعیت
     * @param    entityId    Required parameter: شناسه ی وضعیت
     * @param    xApiKey    Required parameter: کلید اختصاصی ارتباط با سرور
     * @return    Returns the BaseModelStatus response from the API call 
     */
    public BaseModelStatus getStatus(
                final int entityId,
                final String xApiKey
    ) throws Throwable {

        HttpRequest _request = _buildGetStatusRequest(entityId, xApiKey);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetStatusResponse(_context);
    }

    /**
     * دریافت اطلاعات وضعیت
     * @param    entityId    Required parameter: شناسه ی وضعیت
     * @param    xApiKey    Required parameter: کلید اختصاصی ارتباط با سرور
     */
    public void getStatusAsync(
                final int entityId,
                final String xApiKey,
                final APICallBack<BaseModelStatus> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetStatusRequest(entityId, xApiKey);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            BaseModelStatus returnValue = _handleGetStatusResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getStatus
     */
    private HttpRequest _buildGetStatusRequest(
                final int entityId,
                final String xApiKey) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/Status");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("entityId", entityId);
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("x-api-key", xApiKey);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getStatus
     * @return An object of type BaseModelStatus
     */
    private BaseModelStatus _handleGetStatusResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        BaseModelStatus _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<BaseModelStatus>(){});

        return _result;
    }

}
