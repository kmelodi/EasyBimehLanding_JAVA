/*
 * EasyBimehLandingLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package ir.notifaano.server.models;

import java.util.*;

public class InsuranceDataLiabilityDoctorInsuranceBuilder {
    //the instance to build
    private InsuranceDataLiabilityDoctorInsurance insuranceDataLiabilityDoctorInsurance;

    /**
     * Default constructor to initialize the instance
     */
    public InsuranceDataLiabilityDoctorInsuranceBuilder() {
        insuranceDataLiabilityDoctorInsurance = new InsuranceDataLiabilityDoctorInsurance();
    }

    /**
     * شرایط اضافه ی بیمه نامه
     */
    public InsuranceDataLiabilityDoctorInsuranceBuilder liabilityDoctorInsurancePolicyExtendView(LiabilityDoctorInsurancePolicyExtendView liabilityDoctorInsurancePolicyExtendView) {
        insuranceDataLiabilityDoctorInsurance.setLiabilityDoctorInsurancePolicyExtendView(liabilityDoctorInsurancePolicyExtendView);
        return this;
    }

    /**
     * فیلتر های بیمه نامه
     */
    public InsuranceDataLiabilityDoctorInsuranceBuilder liabilityDoctorInsurancePolicyFilter(LiabilityDoctorInsurancePolicyFilter liabilityDoctorInsurancePolicyFilter) {
        insuranceDataLiabilityDoctorInsurance.setLiabilityDoctorInsurancePolicyFilter(liabilityDoctorInsurancePolicyFilter);
        return this;
    }

    public InsuranceDataLiabilityDoctorInsuranceBuilder id(int id) {
        insuranceDataLiabilityDoctorInsurance.setId(id);
        return this;
    }

    /**
     * بیمه نامه تغییر کرده؟
     */
    public InsuranceDataLiabilityDoctorInsuranceBuilder selectedInsurancePolicyHasBeenChanged(boolean selectedInsurancePolicyHasBeenChanged) {
        insuranceDataLiabilityDoctorInsurance.setSelectedInsurancePolicyHasBeenChanged(selectedInsurancePolicyHasBeenChanged);
        return this;
    }

    /**
     * پرداخت شده؟
     */
    public InsuranceDataLiabilityDoctorInsuranceBuilder isPaymented(boolean isPaymented) {
        insuranceDataLiabilityDoctorInsurance.setIsPaymented(isPaymented);
        return this;
    }

    /**
     * قابل پرداخت؟
     */
    public InsuranceDataLiabilityDoctorInsuranceBuilder payable(String payable) {
        insuranceDataLiabilityDoctorInsurance.setPayable(payable);
        return this;
    }

    /**
     * پرداخت شده؟
     */
    public InsuranceDataLiabilityDoctorInsuranceBuilder paymented(String paymented) {
        insuranceDataLiabilityDoctorInsurance.setPaymented(paymented);
        return this;
    }

    public InsuranceDataLiabilityDoctorInsuranceBuilder conflict(String conflict) {
        insuranceDataLiabilityDoctorInsurance.setConflict(conflict);
        return this;
    }

    public InsuranceDataLiabilityDoctorInsuranceBuilder hasConflictDocument(boolean hasConflictDocument) {
        insuranceDataLiabilityDoctorInsurance.setHasConflictDocument(hasConflictDocument);
        return this;
    }

    /**
     * قیمت پایه
     */
    public InsuranceDataLiabilityDoctorInsuranceBuilder initialPrice(String initialPrice) {
        insuranceDataLiabilityDoctorInsurance.setInitialPrice(initialPrice);
        return this;
    }

    /**
     * قیمت نهایی
     */
    public InsuranceDataLiabilityDoctorInsuranceBuilder finalPrice(String finalPrice) {
        insuranceDataLiabilityDoctorInsurance.setFinalPrice(finalPrice);
        return this;
    }

    public InsuranceDataLiabilityDoctorInsuranceBuilder insuranceCompanyName(String insuranceCompanyName) {
        insuranceDataLiabilityDoctorInsurance.setInsuranceCompanyName(insuranceCompanyName);
        return this;
    }

    public InsuranceDataLiabilityDoctorInsuranceBuilder insuranceCentreName(String insuranceCentreName) {
        insuranceDataLiabilityDoctorInsurance.setInsuranceCentreName(insuranceCentreName);
        return this;
    }

    public InsuranceDataLiabilityDoctorInsuranceBuilder isInsuranceCentreAdmin(boolean isInsuranceCentreAdmin) {
        insuranceDataLiabilityDoctorInsurance.setIsInsuranceCentreAdmin(isInsuranceCentreAdmin);
        return this;
    }

    public InsuranceDataLiabilityDoctorInsuranceBuilder insurancePolicyPaymentDocuments(List<String> insurancePolicyPaymentDocuments) {
        insuranceDataLiabilityDoctorInsurance.setInsurancePolicyPaymentDocuments(insurancePolicyPaymentDocuments);
        return this;
    }

    public InsuranceDataLiabilityDoctorInsuranceBuilder insurancePolicyConflict(String insurancePolicyConflict) {
        insuranceDataLiabilityDoctorInsurance.setInsurancePolicyConflict(insurancePolicyConflict);
        return this;
    }

    public InsuranceDataLiabilityDoctorInsuranceBuilder insurancePolicyCondition(String insurancePolicyCondition) {
        insuranceDataLiabilityDoctorInsurance.setInsurancePolicyCondition(insurancePolicyCondition);
        return this;
    }

    public InsuranceDataLiabilityDoctorInsuranceBuilder person(String person) {
        insuranceDataLiabilityDoctorInsurance.setPerson(person);
        return this;
    }

    public InsuranceDataLiabilityDoctorInsuranceBuilder insurancePolicy(String insurancePolicy) {
        insuranceDataLiabilityDoctorInsurance.setInsurancePolicy(insurancePolicy);
        return this;
    }

    public InsuranceDataLiabilityDoctorInsuranceBuilder shoppingCard(String shoppingCard) {
        insuranceDataLiabilityDoctorInsurance.setShoppingCard(shoppingCard);
        return this;
    }

    public InsuranceDataLiabilityDoctorInsuranceBuilder shoppingCardPostalPacket(String shoppingCardPostalPacket) {
        insuranceDataLiabilityDoctorInsurance.setShoppingCardPostalPacket(shoppingCardPostalPacket);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public InsuranceDataLiabilityDoctorInsurance build() {
        return insuranceDataLiabilityDoctorInsurance;
    }
}