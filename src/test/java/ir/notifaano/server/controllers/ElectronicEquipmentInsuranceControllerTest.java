/*
 * EasyBimehLandingLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package ir.notifaano.server.controllers;

import static org.junit.Assert.*;

import java.io.*;
import java.util.*;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import ir.notifaano.server.models.*;
import ir.notifaano.server.exceptions.*;
import ir.notifaano.server.APIHelper;
import ir.notifaano.server.Configuration;
import ir.notifaano.server.testing.TestHelper;
import ir.notifaano.server.controllers.ElectronicEquipmentInsuranceController;

import com.fasterxml.jackson.core.type.TypeReference;

public class ElectronicEquipmentInsuranceControllerTest extends ControllerTestBase {
    
    /**
     * Controller instance (for all tests)
     */
    private static ElectronicEquipmentInsuranceController controller;
    
    /**
     * Setup test class
     */
    @BeforeClass
    public static void setUpClass() {
        controller = getClient().getElectronicEquipmentInsurance();
    }

    /**
     * Tear down test class
     * @throws IOException
     */
    @AfterClass
    public static void tearDownClass() throws IOException {
        controller = null;
    }

    /**
     * TODO: Add Description
     * @throws Throwable
     */
    @Test
    public void testDiviceFranchisee() throws Throwable {
        // Parameters for the API call
        int deviceModelId = 1340;
        String xApiKey = "d6dfd932-75d8-e911-811a-000c294ecf01";

        // Set callback and perform API call
        BaseModelDiviceFranchisee result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.getDiviceFranchisee(deviceModelId, xApiKey);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Date", TestHelper.nullString);
        headers.put("Content-Type", TestHelper.nullString);
        headers.put("Transfer-Encoding", TestHelper.nullString);
        headers.put("Connection", TestHelper.nullString);
        headers.put("Keep-Alive", TestHelper.nullString);
        headers.put("Vary", TestHelper.nullString);
        headers.put("Cache-Control", TestHelper.nullString);
        headers.put("Pragma", TestHelper.nullString);
        headers.put("Expires", TestHelper.nullString);
        headers.put("X-StackifyID", TestHelper.nullString);
        headers.put("X-AspNet-Version", TestHelper.nullString);
        headers.put("X-Powered-By", TestHelper.nullString);
        headers.put("Server", TestHelper.nullString);
        headers.put("AR-PoweredBy", TestHelper.nullString);
        headers.put("ar-sid", TestHelper.nullString);
        headers.put("AR-ATIME", TestHelper.nullString);
        headers.put("AR-CACHE", TestHelper.nullString);
        headers.put("AR-Request-ID", TestHelper.nullString);
        headers.put("Content-Encoding", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", TestHelper.isJsonObjectProperSubsetOf(
                "{\r\n  \"isSuccess\": true,\r\n  \"status\": 200,\r\n  \"message\": [\r\n    {\r\n      \"id\": 5404,\r\n      \"title\": \"30%\",\r\n      \"extraData\": null\r\n    },\r\n    {\r\n      \"id\": 5401,\r\n      \"title\": \"40%\",\r\n      \"extraData\": null\r\n    }\r\n  ],\r\n  \"extraData\": null,\r\n  \"exception\": null\r\n}", 
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
